{
	"version": "https://jsonfeed.org/version/1",
	"title": "Oliver Andrich",
	"icon": "https://micro.blog/oliverandrich/avatar.jpg",
	"home_page_url": "https://andrich.me/",
	"feed_url": "https://andrich.me/feed.json",
	"items": [
		
			{
				"id": "http://oliverandrich.micro.blog/2025/01/11/backup-for-my-home-server.html",
				"title": "Backup for my home server with restic and resticprofile",
				"content_html": "<p><img src=\"https://andrich.me/uploads/2025/cleanshot-2025-01-11-at-16.43.452x.png\" alt=\"\"></p>\n<p>Recently, I did myself a favor and bought a little <a href=\"https://www.amazon.com/-/de/dp/B0D6G36LVK/?th=1\">Beelink SER5 Pro Mini PC</a> a home server to run some services I use on my home network and also to run some development containers.</p>\n<p>With this shiny new home server, I also wanted to set up some offsite backups for it. I <a href=\"https://social.tchncs.de/@oliverandrich/113809850827095296\">asked</a> on Mastodon for suggestions and got tips to use <a href=\"https://www.borgbackup.org/\">borgbackup</a> and <a href=\"https://restic.net/\">restic</a>. Both are reasonable suggestions with great documentation.</p>\n<p>After some research, I decided to go with restic and <a href=\"https://creativeprojects.github.io/resticprofile/\">resticprofile</a>. The deciding factor was that Hetzner, whose new <a href=\"https://www.hetzner.com/storage/object-storage/\">S3-compatible object storage</a> I wanted to use, had a <a href=\"https://docs.hetzner.com/storage/object-storage/howto-backups/restic\">documentation for using restic</a>.</p>\n<h3 id=\"installing-restic-and-resticprofile\">Installing restic and resticprofile</h3>\n<p>I run Debian Bookworm on my home server, so the installation of restic was pretty easy with <strong>apt install restic</strong>. To install resticprofile, I used the <a href=\"https://creativeprojects.github.io/resticprofile/installation/linux/index.html\">guide for linux</a> and ran the following commands:</p>\n<pre><code>curl -LO https://raw.githubusercontent.com/creativeprojects/resticprofile/master/install.sh\nchmod +x install.sh\nsudo ./install.sh -b /usr/local/bin\n</code></pre>\n<h3 id=\"configuring-backups\">Configuring backups</h3>\n<p>First off, I had to configure <a href=\"https://docs.hetzner.com/storage/object-storage/getting-started/generating-s3-keys/\">S3 credentials</a> and set up a <a href=\"https://docs.hetzner.com/storage/object-storage/getting-started/creating-a-bucket/\">S3 bucket</a> on the Hetzner cloud.</p>\n<p>Depending on the location chosen, the endpoint is one of</p>\n<ul>\n<li>fsn1.your-objectstorage.com (Falkenstein)</li>\n<li>nbg1.your-objectstorage.com (Nuremberg)</li>\n<li>hel1.your-objectstorage.com (Helsinki)</li>\n</ul>\n<p>My server has just a small 500 GB SSD disk so far, so I decided to go with a single backup configuration that backups the whole device with some exceptions. The backup is scheduled at midnight and the cleanup process at half past midnight.</p>\n<p>The configuration file is pretty straightforward and easy. I placed it in the one of the default locations <strong>/usr/local/etc/resticprofile/profiles.yaml</strong>.</p>\n<pre><code># yaml-language-server: $schema=https://creativeprojects.github.io/resticprofile/jsonschema/config-1.json\n\nversion: '1'\n\ndefault:\n  repository: 's3:https://&lt;Endpoint of the bucket&gt;/&lt;Name of the S3 Bucket&gt;'\n  initialize: true\n  env:\n    AWS_ACCESS_KEY_ID: &lt;Your Access Key&gt;\n    AWS_SECRET_ACCESS_KEY: &lt;Your Secret Key&gt;\n    RESTIC_PASSWORD: &lt;Some long and cryptic string&gt;\n  backup:\n    source:\n      - /\n    exclude:\n      - /dev\n      - /media\n      - /mnt\n      - /proc\n      - /run\n      - /sys\n      - /tmp\n      - /var/cache\n      - /var/lib/docker\n      - .cache\n    schedule-permission: system\n    schedule-log: &quot;/var/log/resticprofile/homeserver-backup.log&quot;\n    # Every day at midnight\n    schedule: &quot;*-*-* 00:00:00&quot;\n  forget:\n    # Keep the last 10 snapshots\n    keep-last: 10\n    prune: true\n    schedule-permission: system\n    schedule-log: &quot;/var/log/resticprofile/homeserver-forget.log&quot;\n    # Every day at half past midnight\n    schedule: &quot;*-*-* 00:30:00&quot;\n</code></pre>\n<h3 id=\"initialize-and-do-your-first-backup\">Initialize and do your first backup</h3>\n<p>To do the initialization of the repository and run my first backup, I had to call the following two commands.</p>\n<pre><code>resticprofile init\nresticprofile backup \n</code></pre>\n<h3 id=\"scheduling-backups\">Scheduling backups</h3>\n<p>Finally, a lazy guy like me wants a regular process for his backup. resticprofile has a handy command to install a scheduler for me that obeys the rules configured in the <code>profiles.yaml</code> above.</p>\n<pre><code>resticprofile schedule\n</code></pre>\n<p>Done!</p>\n",
				"content_text": "![](https://andrich.me/uploads/2025/cleanshot-2025-01-11-at-16.43.452x.png)\n\nRecently, I did myself a favor and bought a little [Beelink SER5 Pro Mini PC](https://www.amazon.com/-/de/dp/B0D6G36LVK/?th=1) a home server to run some services I use on my home network and also to run some development containers. \n\nWith this shiny new home server, I also wanted to set up some offsite backups for it. I [asked](https://social.tchncs.de/@oliverandrich/113809850827095296) on Mastodon for suggestions and got tips to use [borgbackup](https://www.borgbackup.org/) and [restic](https://restic.net/). Both are reasonable suggestions with great documentation.\n\nAfter some research, I decided to go with restic and [resticprofile](https://creativeprojects.github.io/resticprofile/). The deciding factor was that Hetzner, whose new [S3-compatible object storage](https://www.hetzner.com/storage/object-storage/) I wanted to use, had a [documentation for using restic](https://docs.hetzner.com/storage/object-storage/howto-backups/restic).\n\n### Installing restic and resticprofile\nI run Debian Bookworm on my home server, so the installation of restic was pretty easy with **apt install restic**. To install resticprofile, I used the [guide for linux](https://creativeprojects.github.io/resticprofile/installation/linux/index.html) and ran the following commands:\n\n\tcurl -LO https://raw.githubusercontent.com/creativeprojects/resticprofile/master/install.sh\n\tchmod +x install.sh\n\tsudo ./install.sh -b /usr/local/bin\n\n### Configuring backups\nFirst off, I had to configure [S3 credentials](https://docs.hetzner.com/storage/object-storage/getting-started/generating-s3-keys/) and set up a [S3 bucket](https://docs.hetzner.com/storage/object-storage/getting-started/creating-a-bucket/) on the Hetzner cloud. \n\nDepending on the location chosen, the endpoint is one of\n\n- fsn1.your-objectstorage.com (Falkenstein)\n- nbg1.your-objectstorage.com (Nuremberg)\n- hel1.your-objectstorage.com (Helsinki)\n\nMy server has just a small 500 GB SSD disk so far, so I decided to go with a single backup configuration that backups the whole device with some exceptions. The backup is scheduled at midnight and the cleanup process at half past midnight.\n\nThe configuration file is pretty straightforward and easy. I placed it in the one of the default locations **/usr/local/etc/resticprofile/profiles.yaml**.\n\n\t# yaml-language-server: $schema=https://creativeprojects.github.io/resticprofile/jsonschema/config-1.json\n\t\n\tversion: '1'\n\t\n\tdefault:\n\t  repository: 's3:https://<Endpoint of the bucket>/<Name of the S3 Bucket>'\n\t  initialize: true\n\t  env:\n\t    AWS_ACCESS_KEY_ID: <Your Access Key>\n\t    AWS_SECRET_ACCESS_KEY: <Your Secret Key>\n\t    RESTIC_PASSWORD: <Some long and cryptic string>\n\t  backup:\n\t    source:\n\t      - /\n\t    exclude:\n\t      - /dev\n\t      - /media\n\t      - /mnt\n\t      - /proc\n\t      - /run\n\t      - /sys\n\t      - /tmp\n\t      - /var/cache\n\t      - /var/lib/docker\n\t      - .cache\n\t    schedule-permission: system\n\t    schedule-log: \"/var/log/resticprofile/homeserver-backup.log\"\n\t    # Every day at midnight\n\t    schedule: \"*-*-* 00:00:00\"\n\t  forget:\n\t    # Keep the last 10 snapshots\n\t    keep-last: 10\n\t    prune: true\n\t    schedule-permission: system\n\t    schedule-log: \"/var/log/resticprofile/homeserver-forget.log\"\n\t    # Every day at half past midnight\n\t    schedule: \"*-*-* 00:30:00\"\n\n### Initialize and do your first backup\nTo do the initialization of the repository and run my first backup, I had to call the following two commands.\n\n\tresticprofile init\n\tresticprofile backup \n\n### Scheduling backups\nFinally, a lazy guy like me wants a regular process for his backup. resticprofile has a handy command to install a scheduler for me that obeys the rules configured in the `profiles.yaml` above.\n\n\tresticprofile schedule\n\nDone!\n\n",
				"date_published": "2025-01-11T17:42:05+01:00",
				"url": "https://andrich.me/2025/01/11/backup-for-my-home-server.html",
				"tags": ["tools"]
			},
			{
				"id": "http://oliverandrich.micro.blog/2025/01/11/pretty-happy-how-everything-works.html",
				
				"content_html": "<p>Pretty happy how everything works in this micro.blog. The only thing I have to make up my mind about is, whether I want to use automatic cross posting or not. But the backup to github doesn&rsquo;t seem to work at all. Not sure what I did wrong about it.</p>\n",
				"content_text": "Pretty happy how everything works in this micro.blog. The only thing I have to make up my mind about is, whether I want to use automatic cross posting or not. But the backup to github doesn't seem to work at all. Not sure what I did wrong about it.\n",
				"date_published": "2025-01-11T00:07:02+01:00",
				"url": "https://andrich.me/2025/01/11/pretty-happy-how-everything-works.html"
			},
			{
				"id": "http://oliverandrich.micro.blog/2025/01/10/week-notes.html",
				"title": "Week Notes 2025-01-10",
				"content_html": "<p>This has been the last week of my three-week-long winter holidays. A vacation I needed more than I needed any vacation in the last few years. The second half of 2024 was so packed and stressful. I had many plans for this vacation, but eventually, I just relaxed, watched TV, read three books, played some Xbox and spent some calm days with my wife.</p>\n<p>Something that I haven’t written about is, that I have been <a href=\"https://www.djangoproject.com/foundation/minutes/2024/dec/10/dsf-board-monthly-meeting/\">approved as an individual member</a> of the Django Software Foundation in December. This is something I am a bit proud of.</p>\n<p>As a side note, here you can see one of my two new year resolutions in effect. I want to turn writing week notes and blogging in general into a habit. Wish me luck.</p>\n<h3 id=\"articles\">Articles</h3>\n<ul>\n<li><a href=\"https://simonwillison.net/2024/Dec/31/llms-in-2024/\">Things we learned about LLMs in 2024</a> — Simon wrote the most concise summary about LLMs and the whole bubble around them. If you have to pick one article, take this one. It is full of valuable infos and analysis. But be warned, it is a long read that takes some time to get through.</li>\n<li><a href=\"https://adamj.eu/tech/2025/01/09/django-import-maps/\">Django: render JavaScript import maps in templates</a> — Another great article by <a href=\"https://adamj.eu/\">Adam</a> covering import maps and how to use them in a Django project so that it can be conveniently be integrated with the static file serving of Django.</li>\n<li><a href=\"https://astral.sh/blog/ruff-v0.9.0\">Ruff v0.9.0</a> — Ruff 0.9.0 has been released with some nice additions. Especially the changes for f-string rendering made me happy.</li>\n</ul>\n<h3 id=\"tools\">Tools</h3>\n<ul>\n<li><a href=\"https://lens.rknight.me/\">Lens</a> — a pleasant tool to check your meta tags, icons and rss feeds. It was quite handy while configuring this new blog. I have still not all things solved, but most things work already.</li>\n</ul>\n<h3 id=\"current-reading\">Current Reading</h3>\n<ul>\n<li><a href=\"https://www.cross-cult.de/titel/star-trek-zeit-des-wandels-1-geburt.html?titel_medium=9\">Star Trek — Zeit des Wandels: Geburt</a> 🇩🇪 — The start of an interesting new adventure for the crew of Star Trek: Next Generation. It is set after Star Trek: Nemesis and starts with an investigation of the battlefield in the Rashanar sector. <a href=\"https://en.wikipedia.org/wiki/John_Vornholt\">John Vornholt</a> is a well established writer of tie-ins, so the overall quality of the story is good and exciting. Good stuff to read to relax in the evening.</li>\n<li><a href=\"https://www.rheinwerk-verlag.de/kuenstliche-intelligenz-wie-sie-funktioniert-und-was-sie-fuer-uns-bedeutet/\">Künstliche Intelligenz</a> by <a href=\"https://strumke.github.io/\">Inga Strümke</a> 🇩🇪 — A wonderful introduction to the field of artificial intelligence. A well-deserved bestseller. I am not necessarily the audience for this book with my background in computer science and artificial intelligence studies, but I am learning from this book how to explain modern and partially complex concepts to normal people. In case you need a present for someone who is interested, take this book. I also tried the Norwegian <a href=\"https://www.norli.no/9788248935728\">original book</a>, but my understanding of Norwegian has eroded since the early 2000s. ¯\\_(ツ)_/¯</li>\n</ul>\n<h3 id=\"on-social-media\">On social media</h3>\n<p><img src=\"https://andrich.me/uploads/2025/mastopoet-oliverandrich-09012025.jpg\" alt=\"\"></p>\n<p><a href=\"https://social.tchncs.de/@oliverandrich/113797928988507791\">https://social.tchncs.de/@oliverandrich/113797928988507791</a></p>\n<p>Yesterday I announced that I signed up to <a href=\"https://codeberg.org/\">Codeberg e.V.</a> as a supporting member in favor of my GitHub Pro subscription. I can’t remember that any of my posts received so many boosts and favs. I am a bit surprised by the interaction rate with this Mastodon post. Normally, I see only a few boosts or favs, if any.</p>\n",
				"content_text": "This has been the last week of my three-week-long winter holidays. A vacation I needed more than I needed any vacation in the last few years. The second half of 2024 was so packed and stressful. I had many plans for this vacation, but eventually, I just relaxed, watched TV, read three books, played some Xbox and spent some calm days with my wife.\n\nSomething that I haven’t written about is, that I have been [approved as an individual member](https://www.djangoproject.com/foundation/minutes/2024/dec/10/dsf-board-monthly-meeting/) of the Django Software Foundation in December. This is something I am a bit proud of.\n\nAs a side note, here you can see one of my two new year resolutions in effect. I want to turn writing week notes and blogging in general into a habit. Wish me luck.\n\n### Articles\n- [Things we learned about LLMs in 2024](https://simonwillison.net/2024/Dec/31/llms-in-2024/) — Simon wrote the most concise summary about LLMs and the whole bubble around them. If you have to pick one article, take this one. It is full of valuable infos and analysis. But be warned, it is a long read that takes some time to get through.\n- [Django: render JavaScript import maps in templates](https://adamj.eu/tech/2025/01/09/django-import-maps/) — Another great article by [Adam](https://adamj.eu/) covering import maps and how to use them in a Django project so that it can be conveniently be integrated with the static file serving of Django.\n- [Ruff v0.9.0](https://astral.sh/blog/ruff-v0.9.0) — Ruff 0.9.0 has been released with some nice additions. Especially the changes for f-string rendering made me happy.\n\n###  Tools\n- [Lens](https://lens.rknight.me/) — a pleasant tool to check your meta tags, icons and rss feeds. It was quite handy while configuring this new blog. I have still not all things solved, but most things work already.\n\n### Current Reading\n- [Star Trek — Zeit des Wandels: Geburt](https://www.cross-cult.de/titel/star-trek-zeit-des-wandels-1-geburt.html?titel_medium=9) 🇩🇪 — The start of an interesting new adventure for the crew of Star Trek: Next Generation. It is set after Star Trek: Nemesis and starts with an investigation of the battlefield in the Rashanar sector. [John Vornholt](https://en.wikipedia.org/wiki/John_Vornholt) is a well established writer of tie-ins, so the overall quality of the story is good and exciting. Good stuff to read to relax in the evening.\n- [Künstliche Intelligenz](https://www.rheinwerk-verlag.de/kuenstliche-intelligenz-wie-sie-funktioniert-und-was-sie-fuer-uns-bedeutet/) by [Inga Strümke](https://strumke.github.io/) 🇩🇪 — A wonderful introduction to the field of artificial intelligence. A well-deserved bestseller. I am not necessarily the audience for this book with my background in computer science and artificial intelligence studies, but I am learning from this book how to explain modern and partially complex concepts to normal people. In case you need a present for someone who is interested, take this book. I also tried the Norwegian [original book](https://www.norli.no/9788248935728), but my understanding of Norwegian has eroded since the early 2000s. ¯\\\\\\_(ツ)\\_/¯\n\n### On social media\n![](https://andrich.me/uploads/2025/mastopoet-oliverandrich-09012025.jpg)\n\n[https://social.tchncs.de/@oliverandrich/113797928988507791](https://social.tchncs.de/@oliverandrich/113797928988507791)\n\nYesterday I announced that I signed up to [Codeberg e.V.](https://codeberg.org/) as a supporting member in favor of my GitHub Pro subscription. I can’t remember that any of my posts received so many boosts and favs. I am a bit surprised by the interaction rate with this Mastodon post. Normally, I see only a few boosts or favs, if any.\n\n\n",
				"date_published": "2025-01-10T08:28:07+01:00",
				"url": "https://andrich.me/2025/01/10/week-notes.html",
				"tags": ["development","week notes","python","django"]
			},
			{
				"id": "http://oliverandrich.micro.blog/2025/01/09/my-alfred-workflow-for-todoist.html",
				"title": "My Alfred Workflow for Todoist",
				"content_html": "<p><img src=\"https://andrich.me/uploads/2025/cleanshot-2025-01-09-at-09.42.032x.png\" alt=\"\"></p>\n<p>I use <a href=\"https://todoist.com/\">Todoist</a> as my task list application for a while now. Before that, I have used <a href=\"https://culturedcode.com/things/\">Things</a> by Cultured Code. I had to leave Things behind because it is still lacking the ability to share to-do list with other users. But one feature I have missed from Things all the time — the Things helper. This is a small add-on that registers a global shortcut, that creates tasks for E-Mails or links in Safari or Chrome.</p>\n<p>I got the inspiration from a friend to reimplement it using <a href=\"https://www.alfredapp.com\">Alfred</a>, my primary shortcut and productivity driver on my Mac. And it was way easier than I thought.</p>\n<h3 id=\"features\">Features</h3>\n<ul>\n<li>Register CMD+Shift+Space as a global short to create new tasks. If neither Mail nor Safari is the front most application, the standard quick add dialog from Todoist is opened.</li>\n<li>Register some keywords to open certain views from Alfred.\n<ul>\n<li>“today” and “heute” to open the today view.</li>\n<li>“inbox” and “eingang” to open the inbox view.</li>\n<li>“upcoming” and “geplant” to open the upcoming view.</li>\n</ul>\n</li>\n</ul>\n<p><a href=\"https://codeberg.org/oliverandrich/worfklow-for-todoist/archive/1.0.0.zip\">Download from codeberg.org</a></p>\n",
				"content_text": "![](https://andrich.me/uploads/2025/cleanshot-2025-01-09-at-09.42.032x.png)\n\nI use [Todoist](https://todoist.com/) as my task list application for a while now. Before that, I have used [Things](https://culturedcode.com/things/) by Cultured Code. I had to leave Things behind because it is still lacking the ability to share to-do list with other users. But one feature I have missed from Things all the time — the Things helper. This is a small add-on that registers a global shortcut, that creates tasks for E-Mails or links in Safari or Chrome.\n\nI got the inspiration from a friend to reimplement it using [Alfred](https://www.alfredapp.com), my primary shortcut and productivity driver on my Mac. And it was way easier than I thought. \n\n### Features\n- Register CMD+Shift+Space as a global short to create new tasks. If neither Mail nor Safari is the front most application, the standard quick add dialog from Todoist is opened.\n- Register some keywords to open certain views from Alfred.\n\t- “today” and “heute” to open the today view.\n\t- “inbox” and “eingang” to open the inbox view.\n\t- “upcoming” and “geplant” to open the upcoming view.\n\n[Download from codeberg.org](https://codeberg.org/oliverandrich/worfklow-for-todoist/archive/1.0.0.zip)\n\n",
				"date_published": "2025-01-09T10:51:28+01:00",
				"url": "https://andrich.me/2025/01/09/my-alfred-workflow-for-todoist.html",
				"tags": ["tools"]
			},
			{
				"id": "http://oliverandrich.micro.blog/2025/01/08/bye-bye-wordpress-hello-microblog.html",
				"title": "Bye, Bye, WordPress. Hello, micro.blog!",
				"content_html": "<p>Since Matt started his crazy little campaign at the end of the last year, I had the desire to get rid of WordPress and move elsewhere. First, I thought a bit about using Hugo or so. But this was too much work for my little, low-volume blog. And I also wanted a service that lets me post from my browser and while I am using my mobile. It should be simple, too. Micro.blog is a natural choice then.</p>\n<p>The transition from WordPress was super easy. I set up my blog and followed the instructions from the help section covering the <a href=\"https://help.micro.blog/t/wordpress-import/55\">WordPress import</a>.</p>\n<h3 id=\"lessons-learned-during-my-first-attempt\">Lessons learned during my first attempt</h3>\n<ul>\n<li>Every tag and category is mapped to a category in here. Bad, because I didn&rsquo;t want 100+ categories on my new blog.</li>\n<li>The process takes some time, even though I had the impression that it was finished quickly. This caused me to start the process with different exports several times. Afterward I had every post many times in my post list, every image was imported many times too, and I ended up with a total mess.</li>\n<li>The post-only export doesn&rsquo;t seem to work. You have to export the complete WordPress content for the import process to succeed.</li>\n</ul>\n<p>Having to delete 100 posts and 200 images one by one let me prepare my second attempt a bit better.</p>\n<h3 id=\"my-second-attempt\">My second attempt</h3>\n<p>Before, I did the following on the WordPress side:</p>\n<ul>\n<li>Deleted all tags and categories I would rather not see in micro.blog.</li>\n<li>Deleted posts that I didn&rsquo;t want to migrate.</li>\n</ul>\n<p>Then I did a complete export, did one import and everything worked like a charm.</p>\n<p>In the end, I only migrated 8 posts from the 28 on WordPress. Most of them just worked after the import, I only had to fix all the code blocks because I used a somewhat obscure code block plugin on WordPress.</p>\n<p>Now I am here and satisfied with the results. The tweaking of the theme was easy from my perspective. The backend is simple and just works. The only annoyance I have seen so far, the editor automatically reloads occasionally, which made me finish this post in an external editor. I have to investigate if this is a feature, a problem with my browser or something else. Maybe it is also an option to use a client like MarsEdit or Ulysses.</p>\n",
				"content_text": "Since Matt started his crazy little campaign at the end of the last year, I had the desire to get rid of WordPress and move elsewhere. First, I thought a bit about using Hugo or so. But this was too much work for my little, low-volume blog. And I also wanted a service that lets me post from my browser and while I am using my mobile. It should be simple, too. Micro.blog is a natural choice then.\n\nThe transition from WordPress was super easy. I set up my blog and followed the instructions from the help section covering the [WordPress import](https://help.micro.blog/t/wordpress-import/55).\n\n### Lessons learned during my first attempt\n\n- Every tag and category is mapped to a category in here. Bad, because I didn't want 100+ categories on my new blog.\n- The process takes some time, even though I had the impression that it was finished quickly. This caused me to start the process with different exports several times. Afterward I had every post many times in my post list, every image was imported many times too, and I ended up with a total mess. \n- The post-only export doesn't seem to work. You have to export the complete WordPress content for the import process to succeed.\n\nHaving to delete 100 posts and 200 images one by one let me prepare my second attempt a bit better.\n\n### My second attempt\n\nBefore, I did the following on the WordPress side:\n\n- Deleted all tags and categories I would rather not see in micro.blog.\n- Deleted posts that I didn't want to migrate. \n\nThen I did a complete export, did one import and everything worked like a charm.\n\nIn the end, I only migrated 8 posts from the 28 on WordPress. Most of them just worked after the import, I only had to fix all the code blocks because I used a somewhat obscure code block plugin on WordPress.\n\nNow I am here and satisfied with the results. The tweaking of the theme was easy from my perspective. The backend is simple and just works. The only annoyance I have seen so far, the editor automatically reloads occasionally, which made me finish this post in an external editor. I have to investigate if this is a feature, a problem with my browser or something else. Maybe it is also an option to use a client like MarsEdit or Ulysses.\n",
				"date_published": "2025-01-08T14:06:49+01:00",
				"url": "https://andrich.me/2025/01/08/bye-bye-wordpress-hello-microblog.html",
				"tags": ["tools"]
			},
			{
				"id": "http://oliverandrich.micro.blog/2024/12/30/my-default-apps-at-the.html",
				"title": "My Default Apps at the End of 2024",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p><a href=\"https://micro.webology.dev/2024/12/19/default-apps.html\">Jeff</a> and <a href=\"https://kevquirk.com/blog/my-default-apps-at-the-end-of-2024\">Kev</a> wrote about the default apps they use. It is a nice way to reflect on which tools I actually use and how tools might change over the years.</p>\n\n<ul class=\"wp-block-list\">\n<li>🌐 Browser: <a href=\"https://www.apple.com/safari/\">Safari</a>, Firefox + Chrome for testing</li>\n<li>⛔️Ad Blocking: <a href=\"https://apps.apple.com/de/app/wipr-2/id1662217862\">Wipr 2</a></li>\n<li>🔍 Search: <a href=\"https://kagi.com/\">Kagi</a></li>\n<li>📨 Mail Service: iCloud (private) + O365 (work)</li>\n<li>📮 Mail Client: Apple Mail</li>\n<li>📝 Notes:<a href=\"https://cdn.shopify.com/s/files/1/0812/3241/products/LAM-7934-01_be58ec69-7733-4e53-b428-cdba0800bf78_x1024.jpg?v=1602834305\"> Clairefontaine Notebook</a> +<a href=\"https://shop.lamy.com/de_de/fuellhalter-lamy-aion.html#model_color_material=7695\"> Lamy fountain pen</a>, sometimes Apple Notes</li>\n<li>📁 Cloud File Storage: iCloud Drive</li>\n<li>💬 Chat: Signal (Friends & Family), Apple Messages and Microsoft Teams (work)</li>\n<li>📆 Calendar: Apple Calendar</li>\n<li>✅ To-Do: <a href=\"https://todoist.com\">Todoist</a></li>\n<li>🛒 Shopping Lists: <a href=\"https://todoist.com\">Todoist</a></li>\n<li>📹 Video Calls: <a href=\"https://apps.apple.com/de/app/in-your-face/id1476964367?mt=12\">In Your Face</a> + Teams + Zoom</li>\n<li>📖 RSS Service: <a href=\"https://feedbin.com/\">Feedbin</a></li>\n<li>🎵 Music. : <a href=\"https://www.apple.com/apple-music/\">Apple Music</a></li>\n<li>🎤 Podcasts: Apple Podcasts</li>\n<li>📚 Reading<strong>:</strong> <a href=\"https://amzn.eu/d/3ApyJfV\">Kindle Paperwhite</a></li>\n<li>🔐 Password Management <a href=\"https://1password.com/\">1Password</a></li>\n<li>🧑‍💻 Code Editor: PyCharm + VSCode</li>\n<li>🐚 Terminal: <s><a href=\"https://iterm2.com/\">iTerm2</a></s> + <a href=\"https://ghostty.org\">Ghosttty</a></li>\n<li>✈️ VPN: <a href=\"https://ghostty.org\">Viscocity</a></li>\n<li>📑 Read It Later: Apple Reading List</li>\n<li>🚀 Launcher: <a href=\"https://www.alfredapp.com/\">Alfred 5</a></li>\n<li>🖼️ Screenshots: <a href=\"https://cleanshot.com\">CleanShotX</a></li>\n<li>🤖 Containers: <a href=\"https://orbstack.dev/\">OrbStack</a> + <a href=\"https://www.docker.com/\">Docker Compose</a> </li>\n<li>🎒 Backups: Apple Time Machine</li>\n</ul>\n\n<p>I gave up on all browsers except Safari for my daily browsing purposes. Safari just works, and I heavily rely on the “open in background” functionality only Safari and Firefox offer on macOS to consume my newsletters.</p>\n\n<p>I have used Bartender and Ice to manage my menubar. Both confused me at least once in a presentation this year, so I totally gave up on them and removed just elements from my menubar.</p>\n\n<p>With Todoist I have an on and off relationship. If I find a solution to drop it, I will do so. Things is the other app I use when I am once again mad about Todoist. Ideal would be a combination of both. </p>\n",
				"date_published": "2024-12-30T18:18:03+01:00",
				"url": "https://andrich.me/2024/12/30/my-default-apps-at-the.html",
				"tags": ["tools"]
			},
			{
				"id": "http://oliverandrich.micro.blog/2024/12/07/pycharm-tailwind-amp-htmx.html",
				"title": "PyCharm, Tailwind \u0026 htmx",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-shell\" data-lang=\"shell\">❯ python manage.py tailwind install_pycharm_workaround\nTailwind CSS CLI already exists at <span style=\"color:#e6db74\">&#39;/Users/oa/.local/bin/tailwindcss-macos-arm64-3.4.13&#39;</span>\nCreated package.json at <span style=\"color:#e6db74\">&#39;/Users/oa/Projekte/privat/siloga/package.json&#39;</span>\nCreated link at <span style=\"color:#e6db74\">&#39;/Users/oa/Projekte/privat/siloga/node_modules/tailwindcss/lib/cli.js&#39;</span> to <span style=\"color:#e6db74\">&#39;/Users/oa/.local/bin/tailwindcss-macos-arm64-3.4.13&#39;</span>.\n\nAssure that you have added package.json and node_modules to your .gitignore file.\n</code></pre></div><!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-json\" data-lang=\"json\">{\n  <span style=\"color:#f92672\">&#34;devDependencies&#34;</span>: {<span style=\"color:#f92672\">&#34;tailwindcss&#34;</span>: <span style=\"color:#e6db74\">&#34;latest&#34;</span>}, \n  <span style=\"color:#f92672\">&#34;web-types&#34;</span>: <span style=\"color:#e6db74\">&#34;./htmx.web-types.json&#34;</span>\n}\n</code></pre></div><!-- raw HTML omitted -->\n",
				"content_text": "<p>After I shared my <a href=\"https://oliverandrich.micro.blog/2024/11/27/initial-thoughts-on-pycharm.html\" data-type=\"post\" data-id=\"1150\">initial thoughts on PyCharm</a>, I moved more and more of my projects — personal and work related — to PyCharm. So far, it works out pretty nice, and I am getting more and more accustomed to the IDE. Most of my projects use Django, Tailwind and htmx. While the Django support is great, using Tailwind and htmx needs tweaking.</p>\n\n<h3 class=\"wp-block-heading\">Tailwind</h3>\n\n<p>I already mentioned <a href=\"https://youtrack.jetbrains.com/issue/WEB-55647/Support-Tailwind-css-autocompletion-using-standalone-tailwind-CLI#focus=Comments-27-10957961.0-0\">the required workaround</a> for Tailwind in my initial post. If you have to do it in round about two dozen projects, it turns into a frustrating job. To solve this, I added to new management commands to my <a href=\"https://github.com/django-commons/django-tailwind-cli\">django-tailwind-cli</a> package — <code>install_pycharm_workaround</code> and <code>remove_pycharm_workaround</code>. These commands add or remove the <code>package.json</code> file and a link to the CLI.</p>\n\n```shell\n❯ python manage.py tailwind install_pycharm_workaround\nTailwind CSS CLI already exists at '/Users/oa/.local/bin/tailwindcss-macos-arm64-3.4.13'\nCreated package.json at '/Users/oa/Projekte/privat/siloga/package.json'\nCreated link at '/Users/oa/Projekte/privat/siloga/node_modules/tailwindcss/lib/cli.js' to '/Users/oa/.local/bin/tailwindcss-macos-arm64-3.4.13'.\n\nAssure that you have added package.json and node_modules to your .gitignore file.\n```\n<h3 class=\"wp-block-heading\">htmx</h3>\n\n<p>Something I always wanted to have in VSCode was highlighting and tooltips for the htmx attributes in my HTML code.</p>\n\n<figure class=\"wp-block-image alignwide size-large\"><img src=\"uploads/2025/f06227b8c7.jpg\" alt=\"\" class=\"wp-image-1183\"></figure>\n\n<p>With PyCharm, you can have this! Tobi wrote <a href=\"https://oluwatobi.dev/blog/htmx-support-in-pycharm/\">a great article</a> about this. Just add a statement to the <code>package.json</code> file and drop a file with the <a href=\"https://github.com/bigskysoftware/htmx/blob/master/editors/jetbrains/htmx.web-types.json\">htmx web types</a> in your project.</p>\n\n<p>To get both things up and running, I use this <code>package.json</code> in my projects.</p>\n\n```json\n{\n  \"devDependencies\": {\"tailwindcss\": \"latest\"}, \n  \"web-types\": \"./htmx.web-types.json\"\n}\n```\n<p>Sadly, this is a manual task again. I'm thinking about a simple django package that provides a management command to create this automatically for me. And I plan to make the <code>install_pycharm_workaround</code> management command a bit smarter to support this content of the <code>package.json</code> file. </p>\n\n",
				"date_published": "2024-12-07T21:45:14+01:00",
				"url": "https://andrich.me/2024/12/07/pycharm-tailwind-amp-htmx.html",
				"tags": ["development","python","django"]
			},
			{
				"id": "http://oliverandrich.micro.blog/2024/11/30/the-timeless-power-of-minor.html",
				"title": "The Timeless Power of Minor Threat's 'Salad Days' Cover",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<img src=\"uploads/2025/img-1156.jpeg\" width=\"600\" height=\"337\" alt=\"\">\n\n<p>Pictures have a meaning. Some more, some less, and some are like a pillar of your life. For me, such a picture is the cover of the 1985s <a href=\"https://en.wikipedia.org/wiki/Salad_Days_(EP)\">Salad Days EP</a> by <a href=\"https://en.wikipedia.org/wiki/Minor_Threat\">Minor Threat</a>. It was the final EP by this iconic band. </p>\n\n<p>I was 15, when I discovered it at a local record store in 1986. Before that, I had never heard anything by this band, even though I was deeply into punk rock music — mostly from Germany and the UK — at this time. The title track immediately hooked me up. It was so different from all the stuff I heard at the time. Refreshing. Different. </p>\n\n<p>I bought two albums on this day — the <a href=\"https://en.wikipedia.org/wiki/Salad_Days_(EP)\">Salad Days EP</a>, of course, and <a href=\"https://en.wikipedia.org/wiki/Out_of_Step_(EP)\">Out of Step</a>. </p>\n\n<p>And I knew these lyrics had a meaning — a positive message. Did I get what Ian McKaye was singing about back then? No, not at all. I would have saved me some time if I had. But it took me years to understand straight edge and all the rest he was singing about. </p>\n\n<p>But this day marks more or less the start of my journey into hardcore punk music, New York hardcore and all that followed afterward. I believe every person has a selection of music that forms their thinking and also is its safe spot. Besides all the other things I love and hear, hardcore punk is my safe spot. Bands like Minor Threat, 7 Seconds, H2O, and Agnostic Front established my thinking and believes.</p>\n\n<p>Why do I tell you this and write about?</p>\n\n<p>I did myself a favor today and framed a collage of the iconic cover from 1985 and the <a href=\"https://www.facebook.com/dischordrecords/posts/2072703716124791?ref=embed_post\">reprise from 2018</a> and put it on the wall in my room.</p>\n\n<p>The dialog between these two images is strong for me. For me, it tells a story about being innovative, being true, relationships, and continuity. </p>\n\n",
				"date_published": "2024-11-30T18:27:02+01:00",
				"url": "https://andrich.me/2024/11/30/the-timeless-power-of-minor.html",
				"tags": ["musings"]
			},
			{
				"id": "http://oliverandrich.micro.blog/2024/11/27/initial-thoughts-on-pycharm.html",
				"title": "Initial Thoughts on PyCharm",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<img src=\"uploads/2025/84e06c47ef.jpg\">\n\n<p>I am frustrated by VSCode lately. I might share the reasons in another post someday. For the moment, I turned to PyCharm and try to adopt it as my primary IDE for Python projects. So far, many things are really wonderful, like the refactoring tools, the AI toolbox, the constant level of memory usage and the editor in general.</p>\n\n<p>But some things are at best called confusing, and I am not sure how to solve or deal with them. </p>\n\n<ul class=\"wp-block-list\">\n<li>\n<strong>Bad support for tailwind CLI </strong>— The tailwindcss plugin does not handle the standalone tailwindcss CLI very well. (Yes, I am the <a href=\"https://github.com/django-commons/django-tailwind-cli\">django-tailwind-cli</a> guy.) It is my preferred way to use it. The <a href=\"https://youtrack.jetbrains.com/issue/WEB-55647/Support-Tailwind-css-autocompletion-using-standalone-tailwind-CLI#focus=Comments-27-10957961.0-0\">workaround</a> can at best called clunky. Many people are reporting this for years. So I am not sure if anything will change soon. Can I deal with this in my extension and automate the necessary steps?</li>\n\n<li>\n<strong>Pulling the “wrong” virtual environment —</strong> A surprising “feature” is, that PyCharm does not automatically use a project level virtual environment like VSCode or Sublime do. PyCharm instead tries to find an appropriate virtual environment, but in most situations it finds the wrong one. And it seems as <a href=\"https://mastodon.social/@mistersql/113554828173712808#.\">I am not alone</a>. I am switching a lot between projects and importing them into PyCharm. This has resulted in numerous errors, as I tend to forget about this oddity. Let's see if this calms down after I have imported all the projects. </li>\n\n<li>\n<strong>Project level settings </strong>— PyCharm has many settings, I prefer to set globally as a setting on the project level. For example, I use pytest in all my Django projects. I have to disable the standard Django test runner in each project individually. I understand the reasoning behind this, but for me, it is again something I need to remember.</li>\n</ul>\n\n<p>I am willing to learn to accept these things, as the most annoying behavior of VSCode is solved with PyCharm. Working with our biggest Django application in VSCode burns memory like hell (>15 GB RAM after a few hours) if you want to use all the cool features from the Python extension. PyCharm, on the other hand, stays at 3-3.5 GB even after a long day of working with the code base. This is a game changer for me.</p>\n\n<p>I love how it lets me tweak it to get the slick UI I want to have.  And it feels good that I can support the PSF and DSF by buying a license. This time, I guess I used <a href=\"https://lp.jetbrains.com/psf-q4-2024-fundraiser-3783/\">the PSF discount</a>.</p>\n\n",
				"date_published": "2024-11-27T21:59:14+01:00",
				"url": "https://andrich.me/2024/11/27/initial-thoughts-on-pycharm.html",
				"tags": ["development","python"]
			},
			{
				"id": "http://oliverandrich.micro.blog/2024/11/24/words-a-new-habit-for.html",
				"title": "100 words, a new habit for me?",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p>Occasionally, you have to accept when you fail. Week notes are such a failure to me. My day job almost makes it impossible for me to collect anything helpful I want to reflect on during the weekend. But I love to write regularly.</p>\n\n<p>So, let's try something new and also stick to the <a href=\"https://micro.webology.dev/2024/11/02/please-publish-and.html\">advice of Jeff</a> — please publish and share more. His post also includes two further tips  to keep in mind. </p>\n\n<ul class=\"wp-block-list\">\n<li>Our posts are done when you say they are.</li>\n<li>Write and publish before you write your static site generator or perfect blogging platform. </li>\n</ul>\n\n<p>Especially the second one is <a href=\"https://social.tchncs.de/@oliverandrich/113505982152082405\">written for me</a>.</p>\n\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n\n<p>P.S.: 100 is almost nothing. </p>\n\n",
				"date_published": "2024-11-24T15:55:44+01:00",
				"url": "https://andrich.me/2024/11/24/words-a-new-habit-for.html",
				"tags": ["musings","100 words"]
			},
			{
				"id": "http://oliverandrich.micro.blog/2024/10/01/two-weeks-with-uv.html",
				"title": "Two weeks with uv",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p>Two weeks ago, I published my article <a href=\"https://oliverandrich.micro.blog/2024/09/15/uv-i-am-somewhat-sold.html\">UV - I am (somewhat) sold</a>. Since then, a lot has changed for me. I switched all my personal projects to uv from poetry. I have set up a plan how and when to convert our company projects to uv. I am a fan. (And I still hope that I don't get stomped by the elephant.) </p>\n\n<p>After my post, I received a lot of feedback and also found some interesting follow-ups, that I want to share with you.</p>\n\n<h3 class=\"wp-block-heading\">Did uv solve XKCD #1987 Python Environment?</h3>\n\n<embetty-mastodon status=\"https://mastodon.social/@webology/113142102296895914\"></embetty-mastodon>\n\n<p>I have to agree with him. I never expected this to happen in 2024, but it did happen. After a full week with my new set-up, I have never looked back or missed anything from my Homebrew + pyenv + poetry based set-up. I created 5 new projects, launched two services and transformed a big project to the new workflow. Everything worked like a charm.</p>\n\n<h3 class=\"wp-block-heading\">Background on Astral, Charlie Marsh and uv</h3>\n\n<p>Here is an exciting video interview by <a href=\"https://www.bitecode.dev\">Bite Code!</a> with Charlie Marsh, the creator of ruff and uv.</p>\n\n<div class=\"substack-post-embed\">\n<p lang=\"en\">Charlie Marsh on Astral, UV and the Python packaging ecosystem by Bite Code!</p>\n<p>Yes, we talk about the type-checker thing</p>\n<a data-post-link href=\"https://www.bitecode.dev/p/charlie-marsh-on-astral-uv-and-the\">Read on Substack</a>\n</div><script async src=\"https://substack.com/embedjs/embed.js\" charset=\"utf-8\"></script>\n\n<p>I also enjoyed the <a href=\"https://talkpython.fm/episodes/show/453/uv-the-next-evolution-in-python-packages\">podcast episode of Talk Python</a> my Michael Kennedy. He also made an interesting interview with Charlie Marsh.</p>\n\n<p>The latter of the two links above mostly helped me to get rid of the elephant.</p>\n\n<p>This week, Hynek shared his thoughts on uv and how he is using it. As always, the videos by Hynek are entertaining and packed with lots of information. I also like his differentiated view on the things combined with some bold statements. A must see!</p>\n\n<h3 class=\"wp-block-heading\">Criticisms</h3>\n\n<p>Most people criticizing my radical approach to only using uv and totally ignoring the official Python installers mentioned <a href=\"https://gregoryszorc.com/docs/python-build-standalone/main/quirks.html\">the list of quirks</a> Gregory published on his web page. Gregory develops the underlying standalone Python builds, that uv and other tools use. Most of these quirks are not relevant for me, and some I can't reproduce so far. </p>\n\n<ul class=\"wp-block-list\">\n<li>Backspace Key Doesn’t work in Python REPL</li>\n<li>Tcl/tk Support Files</li>\n<li>No Weak Symbols from Modern macOS on Python 3.8</li>\n<li>No tix on macOS</li>\n<li>No pip.exe on Windows</li>\n<li>Windows Static Distributions are Extremely Brittle</li>\n<li>Linking Static Library on macOS</li>\n<li>Use of libedit on Linux</li>\n<li>Static Linking of musl libc Prevents Extension Module Library Loading</li>\n<li>Static Linking of libX11 / Incompatibility with PyQt on Linux</li>\n<li>Missing libcrypt.so.1</li>\n<li>References to Build-Time Paths</li>\n</ul>\n\n<p>Personally, I prefer to live with a list of quirks that don't hit me instead of the situation described by <a href=\"https://xkcd.com/1987/\">XKCD #1987</a>.</p>\n\n<h3 class=\"wp-block-heading\">uv publish</h3>\n\n<p>Since my last post, Astral added <a href=\"https://docs.astral.sh/uv/guides/publish/\">support for publishing packages to PyPI</a>. This is wonderful because it closes the last gap where I had to use a different tool instead of uv. </p>\n\n",
				"date_published": "2024-10-01T20:14:46+01:00",
				"url": "https://andrich.me/2024/10/01/two-weeks-with-uv.html",
				"tags": ["development","python"]
			},
			{
				"id": "http://oliverandrich.micro.blog/2024/09/15/uv-i-am-somewhat-sold.html",
				"title": "UV — I am (somewhat) sold",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-shell\" data-lang=\"shell\">uv python install 3.8\nuv python install 3.9\nuv python install 3.10\nuv python install 3.11\nuv python install 3.12\nuv python install 3.13\n</code></pre></div><!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-fish\" data-lang=\"fish\">alias python3.<span style=\"color:#ae81ff\">8</span> <span style=\"color:#e6db74\">&#39;uv run --python=3.8 python3&#39;</span>\nalias python3.<span style=\"color:#ae81ff\">9</span> <span style=\"color:#e6db74\">&#39;uv run --python=3.9 python3&#39;</span>\nalias python3.<span style=\"color:#ae81ff\">10</span> <span style=\"color:#e6db74\">&#39;uv run --python=3.10 python3&#39;</span>\nalias python3.<span style=\"color:#ae81ff\">11</span> <span style=\"color:#e6db74\">&#39;uv run --python=3.11 python3&#39;</span>\nalias python3.<span style=\"color:#ae81ff\">12</span> <span style=\"color:#e6db74\">&#39;uv run --python=3.12 python3&#39;</span>\nalias python3.<span style=\"color:#ae81ff\">13</span> <span style=\"color:#e6db74\">&#39;uv run --python=3.13 python3&#39;</span>\nalias python3 python3.<span style=\"color:#ae81ff\">12</span>\n</code></pre></div><!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-shell\" data-lang=\"shell\">uv tool install --python<span style=\"color:#f92672\">=</span>3.12 djhtml\nuv tool install --python<span style=\"color:#f92672\">=</span>3.12 poetry\nuv tool install --python<span style=\"color:#f92672\">=</span>3.12 ipython\nuv tool install --python<span style=\"color:#f92672\">=</span>3.12 llm\nuv tool install --python<span style=\"color:#f92672\">=</span>3.12 --with pre-commit-uv pre-commit\nuv tool install --python<span style=\"color:#f92672\">=</span>3.12 --with tox-uv tox\nuv tool install --python<span style=\"color:#f92672\">=</span>3.12 --with mkdocs-material mkdocs\n</code></pre></div><!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-shell\" data-lang=\"shell\"><span style=\"color:#75715e\"># run test suite</span>\n@test: create_venv \n    uvx –with tox-uv tox\n\n<span style=\"color:#75715e\"># serve docs during development</span>\n@serve-docs: \n    uvx –with mkdocs-material mkdocs serve\n\n<span style=\"color:#75715e\"># build documenation</span>\n@build-docs: \n    uvx –with mkdocs-material mkdocs build\n\n<span style=\"color:#75715e\"># publish documentation on github</span>\n@publish-docs: \n    build-docs uvx –with mkdocs-material mkdocs gh-deploy –force\n\n<span style=\"color:#75715e\"># run pre-commit rules on all files</span>\n@lint: create_venv\n    uvx –with pre-commit-uv pre-commit run –all-files\n\n<span style=\"color:#75715e\"># run test suite</span>\n@test: create_venv\n    uvx –with tox-uv tox\n\n<span style=\"color:#75715e\"># serve docs during development</span>\n@serve-docs:\n    uvx –with mkdocs-material mkdocs serve\n\n<span style=\"color:#75715e\"># build documenation</span>\n@build-docs:\n    uvx –with mkdocs-material mkdocs build\n\n<span style=\"color:#75715e\"># publish documentation on github</span>\n@publish-docs: build-docs\n    uvx –with mkdocs-material mkdocs gh-deploy –force\n</code></pre></div><!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-shell\" data-lang=\"shell\"><span style=\"color:#75715e\"># Install the current version of uv and uvx to $HOME/.cargo/bin</span>\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n\n<span style=\"color:#75715e\"># Install Python versions</span>\nuv python install 3.8\nuv python install 3.9\nuv python install 3.10\nuv python install 3.11\nuv python install 3.12\nuv python install 3.13\n\n<span style=\"color:#75715e\"># Define the aliases</span>\nalias python3.8 <span style=\"color:#e6db74\">&#39;uv run --python=3.8 python3&#39;</span>\nalias python3.9 <span style=\"color:#e6db74\">&#39;uv run --python=3.9 python3&#39;</span>\nalias python3.10 <span style=\"color:#e6db74\">&#39;uv run --python=3.10 python3&#39;</span>\nalias python3.11 <span style=\"color:#e6db74\">&#39;uv run --python=3.11 python3&#39;</span>\nalias python3.12 <span style=\"color:#e6db74\">&#39;uv run --python=3.12 python3&#39;</span>\nalias python3.13 <span style=\"color:#e6db74\">&#39;uv run --python=3.13 python3&#39;</span>\nalias python3 python3.12\n\n<span style=\"color:#75715e\"># Install tools to $HOME/.local/bin</span>\nuv tool install --python<span style=\"color:#f92672\">=</span>3.12 djhtml\nuv tool install --python<span style=\"color:#f92672\">=</span>3.12 poetry\nuv tool install --python<span style=\"color:#f92672\">=</span>3.12 ipython\nuv tool install --python<span style=\"color:#f92672\">=</span>3.12 llm\nuv tool install --python<span style=\"color:#f92672\">=</span>3.12 --with pre-commit-uv pre-commit\nuv tool install --python<span style=\"color:#f92672\">=</span>3.12 --with tox-uv tox\nuv tool install --python<span style=\"color:#f92672\">=</span>3.12 --with mkdocs-material mkdocs\n</code></pre></div><!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-shell\" data-lang=\"shell\"><span style=\"color:#75715e\"># Install the current version of uv and uvx to $HOME/.cargo/bin</span>\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n\n<span style=\"color:#75715e\"># Install Python versions</span>\nuv python install 3.12\n\n<span style=\"color:#75715e\"># Define the aliases</span>\nalias python3.12 <span style=\"color:#e6db74\">&#39;uv run --python=3.12 python3&#39;</span>\nalias python3 python3.12\n</code></pre></div>",
				"content_text": "<!-- wp:paragraph -->\n<p>A bit more than a week ago, I posted this on Mastodon after I read several posts in a long thread on using <a href=\"https://docs.astral.sh/uv/\">UV</a> for Python projects. Simon has created a blog post summing up and linking to the most significant posts in this long thread — <a href=\"https://simonwillison.net/2024/Sep/8/uv-under-discussion-on-mastodon/\">uv under discussion on Mastodon</a>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<embetty-mastodon status=\"https://social.tchncs.de/@oliverandrich/113098191892485622\"></embetty-mastodon>\n<!-- /wp:html -->\n\n<!-- wp:paragraph -->\n<p>Now, a week later, I have to admit that I was wrong. I still stand with my opinion that the speed improvement is not crucial to me, but it is of course nice to have. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>So, what has changed my mind? The short answer: I totally misunderstood what UV can do for me since the release of version 0.4.0.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For a longer explanation, I have to describe my requirements for my local Python environment. I need to have various Python versions installed locally to test my work and my personal projects. Ranging from Python 3.8 to 3.13. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I also need them for running some dated scripts, that need upgrades, but I don't have the time to do so for a long time. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I also require decent dependency management in my projects that goes beyond manually editing a <code>pyproject.toml</code> file. Likewise, I am way too accustomed to <code>poetry add ...</code>. And I run a number of Python-based tools — <a href=\"https://pypi.org/project/djhtml/\">djhtml</a>, <a href=\"https://pypi.org/project/poetry/\">poetry</a>, <a href=\"https://pypi.org/project/ipython/\">ipython</a>, <a href=\"https://pypi.org/project/llm/\">llm</a>, <a href=\"https://pypi.org/project/mkdocs/\">mkdocs</a>, <a href=\"https://pypi.org/project/pre-commit/\">pre-commit</a>, <a href=\"https://pypi.org/project/tox/\">tox</a>, ...</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>So far, I have fulfilled these requirements with a changing mixture of <a href=\"https://brew.sh\">Homebrew</a>, <a href=\"https://pypi.org/project/pipx/\">pipx</a> and <a href=\"https://github.com/pyenv/pyenv\">pyenv</a>. This works, but can be sometimes complicated to keep in sync, and at least pyenv and pipx sometimes had issues with my fish shell, that I were never able to figure out before some kind of self-healing fixed it. Basically, nothing is wrong with the above-mentioned tools.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Inspired from posts by <a href=\"https://blog.pecar.me/uv-with-django?utm_campaign=Django%2BNewsletter&utm_medium=email&utm_source=Django_Newsletter_250\">Anže</a> and <a href=\"https://micro.webology.dev/2024/08/22/python-uv-run.html\">Jeff</a> I had on my reading list, I decided to give UV another try and see if I can switch over to a single tool to manage my requirements.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I started by removing all Python installations, pyenv, pipx and Homebrew from my machine. Rendering me unable to do my work. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Managing python versions</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>So far, I have switched back and forth between Homebrew and pyenv to manage my local Python installations. UV can solve this easily, too. I just had to run the following commands to get my required range of Python versions installed.</p>\n<!-- /wp:paragraph -->\n\n```shell\nuv python install 3.8\nuv python install 3.9\nuv python install 3.10\nuv python install 3.11\nuv python install 3.12\nuv python install 3.13\n```\n<!-- wp:paragraph -->\n<p>As I mentioned above, I have to run these versions from time to time interactively, and I also have some scripts that need to be run with a certain version of Python.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Homebrew solved this by putting them all on the global PATH. The versions installed with UV are not immediately available for use. But this can be easily solved with some handy aliases.</p>\n<!-- /wp:paragraph -->\n\n```fish\nalias python3.8 'uv run --python=3.8 python3'\nalias python3.9 'uv run --python=3.9 python3'\nalias python3.10 'uv run --python=3.10 python3'\nalias python3.11 'uv run --python=3.11 python3'\nalias python3.12 'uv run --python=3.12 python3'\nalias python3.13 'uv run --python=3.13 python3'\nalias python3 python3.12\n```\n<!-- wp:paragraph -->\n<p>Solved. See the documentation for <a href=\"https://docs.astral.sh/uv/concepts/python-versions/\">uv python</a>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Managing tools</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The above-mentioned list of tools was partially managed by Homebrew and pipx on my system. I normally used the Homebrew version until I had to inject some plugin or extra dependencies to it. Then I switched to pipx to use <code>pipx inject</code>. With UV, you can do the very same.</p>\n<!-- /wp:paragraph -->\n\n```shell\nuv tool install --python=3.12 djhtml\nuv tool install --python=3.12 poetry\nuv tool install --python=3.12 ipython\nuv tool install --python=3.12 llm\nuv tool install --python=3.12 --with pre-commit-uv pre-commit\nuv tool install --python=3.12 --with tox-uv tox\nuv tool install --python=3.12 --with mkdocs-material mkdocs\n```\n<!-- wp:paragraph -->\n<p>Personally, I find the syntax with the <code>--with</code> argument a bit more appealing than to use two commands to install and inject the extra dependencies. But this is just personal taste.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><code>pre-commit-uv</code> and <code>tox-uv</code> are two helpful extensions for <code>pre-commit</code> and <code>tox</code>, which make these tools use uv for managing the underlying virtual environments.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Solved. See the documentation for <a href=\"https://docs.astral.sh/uv/concepts/tools/\">uv tool</a>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Managing projects</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>So far, I used UV only as a pip replacement in my <a href=\"https://pypi.org/project/django-tailwind-cli/\">django-tailwind-cli</a> project to speed up some tasks. It was a quick win to shave off some seconds on CI/CD runs and also when running <code>tox</code> locally.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>But actually, it can replace poetry for me in most of the projects I have to deal with. See the documentation on <a href=\"https://docs.astral.sh/uv/guides/projects/\">working with projects</a>. It has all the tools in place to create a new project, to manage dependencies and also to build a package. The only missing part is publishing to PyPI, which has to be solved <a href=\"https://docs.astral.sh/uv/guides/publish/\">using twine</a> at the moment. I am sure, they will integrate this too.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https://fosstodon.org/@anze3db#.\">Anže</a> described in detail <a href=\"https://blog.pecar.me/uv-with-django\">how to manage a Django project with UV</a>. A great article you should check out.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>What I like to highlight in this section is, how <code>uvx</code> can remove some superfluous dev dependencies from your project. Even though <code>pipx run</code> would have done the very same for me, I never had the idea to use it in my <code>justfile</code> or <a href=\"https://github.com/oliverandrich/django-tailwind-cli/blob/main/.github/workflows/test.yml\">GitHub Actions</a> like that. Using this technique, I could kick tox, mkdocs and some more tools from my dev dependencies and still get the same tooling. The lines below are from the <a href=\"https://github.com/oliverandrich/django-tailwind-cli/blob/main/justfile\">justfile</a> in my django-tailwind-cli project.</p>\n<!-- /wp:paragraph -->\n\n```shell\n# run test suite\n@test: create_venv \n    uvx –with tox-uv tox\n\n# serve docs during development\n@serve-docs: \n    uvx –with mkdocs-material mkdocs serve\n\n# build documenation\n@build-docs: \n    uvx –with mkdocs-material mkdocs build\n\n# publish documentation on github\n@publish-docs: \n    build-docs uvx –with mkdocs-material mkdocs gh-deploy –force\n\n# run pre-commit rules on all files\n@lint: create_venv\n    uvx –with pre-commit-uv pre-commit run –all-files\n\n# run test suite\n@test: create_venv\n    uvx –with tox-uv tox\n\n# serve docs during development\n@serve-docs:\n    uvx –with mkdocs-material mkdocs serve\n\n# build documenation\n@build-docs:\n    uvx –with mkdocs-material mkdocs build\n\n# publish documentation on github\n@publish-docs: build-docs\n    uvx –with mkdocs-material mkdocs gh-deploy –force\n```\n\n<!-- wp:paragraph -->\n<p>Solved.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Am I happy?</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>To be honest — I am.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I started basically with an empty machine, downloaded a single binary and used it to set up my complete development environment with it. There was a post on Mastodon, that describes this as one of the interesting aspects of UV for training sessions or people starting with Python. I have to agree that this is an appealing aspect. At least if you go beyond the topics possible just with the official installer.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p> I really like the environment I have set up. And I also enjoy the overall tooling and CLI decisions taken by the people at Astral. Let's see if this impression lasts over a full working week. Otherwise, you will see another post next Sunday. 🤣 </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">The elephant in the room</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>To finish this post, let's discuss the elephant in the room, as Armin Ronacher named it in <a href=\"https://lucumr.pocoo.org/2024/8/21/harvest-season/\">his post from the end of August</a>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\">\n<!-- wp:paragraph -->\n<p>There is an elephant in the room which is that Astral is a VC funded company. What does that mean for the future of these tools? Here is my take on this: for the community having someone pour money into it can create some challenges. For the PSF and the core Python project this is something that should be considered. However having seen the code and what uv is doing, even in the worst possible future this is a very forkable and maintainable thing. I believe that even in case Astral shuts down or were to do something incredibly dodgy licensing wise, the community would be better off than before uv existed.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>-- <a href=\"https://lucumr.pocoo.org/2024/8/21/harvest-season/\">Armin Ronacher</a></p>\n<!-- /wp:paragraph -->\n</blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>I agree with Armin. There is a risk attached, but eventually the community is better off than before. I also tend to believe the words of <a href=\"https://hachyderm.io/@charliermarsh/113103564055291456\">Charlie Marsh</a>, creator of uv and ruff, he wrote in several posts as he entered the before mentioned discussion on Mastodon. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>And if the worst possible future happens, I hope that some tools take inspiration from uv or some standard solution that provides tooling like that is added to the official installer. We need a bit more than pip inside the standard distribution from my perspective. Rust, node and go show that it is possible and also able to create a momentum.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Appendix: Steps to set up my environment</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Here are the steps I took to set up my environment.</p>\n<!-- /wp:paragraph -->\n\n```shell\n# Install the current version of uv and uvx to $HOME/.cargo/bin\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n\n# Install Python versions\nuv python install 3.8\nuv python install 3.9\nuv python install 3.10\nuv python install 3.11\nuv python install 3.12\nuv python install 3.13\n\n# Define the aliases\nalias python3.8 'uv run --python=3.8 python3'\nalias python3.9 'uv run --python=3.9 python3'\nalias python3.10 'uv run --python=3.10 python3'\nalias python3.11 'uv run --python=3.11 python3'\nalias python3.12 'uv run --python=3.12 python3'\nalias python3.13 'uv run --python=3.13 python3'\nalias python3 python3.12\n\n# Install tools to $HOME/.local/bin\nuv tool install --python=3.12 djhtml\nuv tool install --python=3.12 poetry\nuv tool install --python=3.12 ipython\nuv tool install --python=3.12 llm\nuv tool install --python=3.12 --with pre-commit-uv pre-commit\nuv tool install --python=3.12 --with tox-uv tox\nuv tool install --python=3.12 --with mkdocs-material mkdocs\n```\n<!-- wp:paragraph -->\n<p>To set up a minimal environment for Python might look like that.</p>\n<!-- /wp:paragraph -->\n\n```shell\n# Install the current version of uv and uvx to $HOME/.cargo/bin\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n\n# Install Python versions\nuv python install 3.12\n\n# Define the aliases\nalias python3.12 'uv run --python=3.12 python3'\nalias python3 python3.12\n```\n",
				"date_published": "2024-09-15T14:28:36+01:00",
				"url": "https://andrich.me/2024/09/15/uv-i-am-somewhat-sold.html",
				"tags": ["blogging"]
			}
	]
}
